@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Register</h1>
@*ApplicationUserModel*@

@code {

    private ApplicationUserModel RegisterModel = new ApplicationUserModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
            Console.WriteLine(Errors);
        }

        System.Console.WriteLine(RegisterModel);
    }



}



@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}



@*<div class="row">
    <div class="col-md-6">
        <a type="button" class="btn btn-primary" href="addclients">
            Add Client
        </a>
    </div>
    <div class="col-md-6 offset-3">
        <div class="form-inline">
            <div class="form-group">
                <label for="issues" class="sr-only">Issues</label>
                <input type="text" class="form-control" @bind="nameFilter" name="issues" placeholder="Filter Names">
            </div>
           <button type="submit" class="btn btn-primary mb-2" @onclick="HandleRegistration">Filter</button>
        </div>
    </div>
</div>*@


<div class="card">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText Id="username" class="form-control" @bind-Value="RegisterModel.UserName" />
                    <ValidationMessage For="@(() => RegisterModel.UserName)" />
                </div>

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText Id="email" type="email" class="form-control" @bind-Value="RegisterModel.Email" />
                    <ValidationMessage For="@(() => RegisterModel.Email)" />
                </div>

                <div class="form-group">
                    <label for="businessname">Business Name</label>
                    <InputText Id="businessname" type="text" class="form-control" @bind-Value="RegisterModel.BusinessName" />
                    <ValidationMessage For="@(() => RegisterModel.BusinessName)" />
                </div>

                <div class="form-group">
                    <label for="phonenumber">Phone Number</label>
                    <InputText Id="phone" type="text" class="form-control" @bind-Value="RegisterModel.PhoneNumber" />
                    <ValidationMessage For="@(() => RegisterModel.PhoneNumber)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                    <ValidationMessage For="@(() => RegisterModel.Password)" />
                </div>

                <div class="form-group">
                    <label for="confirmopassword">Confirm Password</label>
                    <InputText Id="comfirmpassword" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>

